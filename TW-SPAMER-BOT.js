const teeworlds = require('teeworlds');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function askQuestion(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

async function runBot(server, baseName, botNumber, mode, voteChoice, chatMessage) {
    const [ip, port] = server.split(':');
    const botName = `${baseName}${botNumber.toString().padStart(3, '0')}`;
    const client = new teeworlds.Client(ip, parseInt(port), botName, { mod: "ddnet" });

    return {
        connect: async () => {
            try {
                await client.connect();
                console.log(`ü§ñ ${botName} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ ${ip}:${port}`);
            } catch (err) {
                console.log(`ü§ñ ${botName} –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${err.message}`);
            }
        },
        say: async (message) => {
            try {
                await client.game.Say(message);
            } catch (err) {
                console.log(`ü§ñ ${botName} –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${err.message}`);
            }
        },
        disconnect: async () => {
            try {
                await client.Disconnect();
            } catch (err) {
                console.log(`ü§ñ ${botName} –æ—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: ${err.message}`);
            }
        },
        setupListeners: () => {
            client.on("connected", () => {
                console.log(`ü§ñ ${botName} –≤–æ—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä`);
            });
            client.on("disconnect", (reason) => {
                console.log(`ü§ñ ${botName} –æ—Ç–∫–ª—é—á–µ–Ω: ${reason}`);
            });
            client.on("message", (message) => {
                if (message.author && message.author.ClientInfo) {
                    console.log(`üí¨ ${message.author.ClientInfo.name}: ${message.message}`);
                } else {
                    console.log(`üì¢ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.message}`);
                }
            });
            client.on("kill", (info) => {
                if (info.killer && info.victim && info.killer.ClientInfo && info.victim.ClientInfo) {
                    console.log(` ${info.killer.ClientInfo.name} —É–±–∏–ª ${info.victim.ClientInfo.name}`);
                }
            });
            client.on("error", (err) => {
                console.log(`‚ö†Ô∏è ${botName} –æ—à–∏–±–∫–∞: ${err.message}`);
            });
        }
    };
}

async function runBotGroup(server, baseName, botCount, mode, voteChoice, chatMessage) {
    const bots = [];
    for (let i = 1; i <= botCount; i++) {
        const bot = await runBot(server, baseName, i, mode, voteChoice, chatMessage);
        bot.setupListeners();
        bots.push(bot);
    }

    let firstCycle = true;

    async function actionLoop() {
        try {
            if (firstCycle) {
                console.log("–ü–æ–¥–∫–ª—é—á–∞—é –≤—Å–µ—Ö –±–æ—Ç–æ–≤...");
                await Promise.all(bots.map(bot => bot.connect()));
            } else {
                await Promise.all(bots.map(bot => bot.connect()));
            }
            await new Promise(resolve => setTimeout(resolve, 2000));

            if (mode === "spam") {
                if (firstCycle) console.log("–†–µ–∂–∏–º —Å–ø–∞–º–∞, –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è...");
            } else if (mode === "vote") {
                if (firstCycle) {
                    console.log("–í—Å–µ –±–æ—Ç—ã –≥–æ–ª–æ—Å—É—é—Ç...");
                    await Promise.all(bots.map(bot => bot.say(voteChoice === "yes" ? "yes" : "no")));
                    console.log(`‚úÖ –í—Å–µ ${botCount} –±–æ—Ç–æ–≤ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: ${voteChoice === "yes" ? "–¥–∞" : "–Ω–µ—Ç"}`);
                } else {
                    await Promise.all(bots.map(bot => bot.say(voteChoice === "yes" ? "yes" : "no")));
                    console.log(`‚úÖ –ë–æ—Ç—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ ${new Date().toLocaleTimeString()}`);
                }
            } else if (mode === "chat") {
                if (firstCycle) {
                    console.log("–í—Å–µ –±–æ—Ç—ã –ø–∏—à—É—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...");
                    await Promise.all(bots.map(bot => bot.say(chatMessage)));
                    console.log(`‚úÖ –í—Å–µ ${botCount} –±–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${chatMessage}"`);
                } else {
                    await Promise.all(bots.map(bot => bot.say(chatMessage)));
                    console.log(`‚úÖ –ë–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${new Date().toLocaleTimeString()}`);
                }
            }

            await new Promise(resolve => setTimeout(resolve, 3000));
            if (firstCycle) {
                console.log("–û—Ç–∫–ª—é—á–∞—é –≤—Å–µ—Ö –±–æ—Ç–æ–≤...");
                await Promise.all(bots.map(bot => bot.disconnect()));
                firstCycle = false;
            } else {
                await Promise.all(bots.map(bot => bot.disconnect()));
                console.log(`üîå –ë–æ—Ç—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –≤ ${new Date().toLocaleTimeString()}`);
            }

            setTimeout(actionLoop, 1000);
        } catch (err) {
            console.log(` –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ –±–æ—Ç–æ–≤: ${err.message}`);
            setTimeout(actionLoop, 2000);
        }
    }

    actionLoop();
}

async function main() {
    console.log(`
 /_/\  
( o.o ) 
 > ^ <
   TW-SPAMER-BOT 
by @keepyourhuman & @Black0re0
DDNet 18.0.9.0 Support
    `);
    const server = await askQuestion("–í–≤–µ–¥–∏—Ç–µ IP:–ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 68.29.94.32:8303): ");
    const baseName = await askQuestion("–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –Ω–∏–∫ –¥–ª—è –±–æ—Ç–æ–≤: ");
    const botCount = parseInt(await askQuestion("–°–∫–æ–ª—å–∫–æ –±–æ—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç—å? "));

    console.log("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–æ–≤:");
    console.log("1. –°–ø–∞–º ‚Äî –±–æ—Ç—ã –∑–∞—Ö–æ–¥—è—Ç –∏ –≤—ã—Ö–æ–¥—è—Ç");
    console.log("2. –ë–æ–ª–≤–∞–Ω–∫–∞ ‚Äî –±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–∏–¥—è—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
    console.log("3. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ‚Äî –±–æ—Ç—ã –≥–æ–ª–æ—Å—É—é—Ç –∏ –≤—ã—Ö–æ–¥—è—Ç");
    console.log("4. –°–æ–æ–±—â–µ–Ω–∏—è ‚Äî –±–æ—Ç—ã –ø–∏—à—É—Ç –≤ —á–∞—Ç –∏ –≤—ã—Ö–æ–¥—è—Ç");
    const modeChoice = await askQuestion("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1-4): ");

    let mode, voteChoice, chatMessage;
    if (modeChoice === "1") {
        mode = "spam";
    } else if (modeChoice === "2") {
        mode = "dummy";
    } else if (modeChoice === "3") {
        mode = "vote";
        voteChoice = await askQuestion("–ó–∞ —á—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å? (yes/no): ");
        while (voteChoice !== "yes" && voteChoice !== "no") {
            voteChoice = await askQuestion("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'yes' –∏–ª–∏ 'no': ");
        }
    } else if (modeChoice === "4") {
        mode = "chat";
        chatMessage = await askQuestion("–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç? ");
    } else {
        console.log("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω–∞ –±–æ–ª–≤–∞–Ω–∫–∞.");
        mode = "dummy";
    }

    console.log(`\n–ó–∞–ø—É—Å–∫–∞—é ${botCount} –±–æ—Ç–æ–≤ –Ω–∞ ${server} –≤ —Ä–µ–∂–∏–º–µ "${mode}"...\n`);

    if (mode === "dummy") {
        const bots = [];
        for (let i = 1; i <= botCount; i++) {
            const bot = await runBot(server, baseName, i, mode, voteChoice, chatMessage);
            bot.setupListeners();
            bots.push(bot.connect());
        }
        await Promise.all(bots);
    } else {
        runBotGroup(server, baseName, botCount, mode, voteChoice, chatMessage);
    }
}

console.log("–í–≤–µ–¥–∏—Ç–µ 'bot' –¥–ª—è –∑–∞–ø—É—Å–∫–∞:");
rl.on('line', (input) => {
    if (input.trim() === "bot") {
        main().then(() => {
            console.log("–í—Å–µ –±–æ—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã! –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.");
        }).catch(err => {
            console.error("–û—à–∏–±–∫–∞:", err);
            rl.close();
        });
    }
});

process.on("SIGINT", () => {
    console.log("\n–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–æ–≤...");
    rl.close();
    process.exit(0);
});